""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" 	Copyright (C) 2015 Sean Guo. All rights reserved.
"
"     > File Name:         < .vimrc >
"     > Author:            < Sean Guo >
"     > Mail:              < iseanxp+code@gmail.com >
"     > Created Time:      
"     > Last Changed:      < 2015/09/29 >
"     > Description:	   vimrc	
"
"    #####                       #     # ######     #     # ### #     #
"   #     # ######   ##   #    #  #   #  #     #    #     #  #  ##   ##
"   #       #       #  #  ##   #   # #   #     #    #     #  #  # # # #
"    #####  #####  #    # # #  #    #    ######     #     #  #  #  #  #
"         # #      ###### #  # #   # #   #           #   #   #  #     #
"   #     # #      #    # #   ##  #   #  #            # #    #  #     #
"    #####  ###### #    # #    # #     # #             #    ### #     #
"
"	 _____________________________________
"	/ This is the personal .vimrc file of \
"	\ SeanXP.                             /
" 	-------------------------------------
"	        \   ^__^
"	         \  (oo)\_______
"	            (__)\       )\/\
"	                ||----w |
"	                ||     ||
"	
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""{
" 设置文件编码
"

" fileencodings(fencs) : Vim在打开文件时会根据fileencodings选项来识别文件编码, 
" 可以同时设置多个编码, Vim会根据设置的顺序来猜测所打开文件的编码。
set fileencodings=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936

" fileencoding(fenc) : Vim在保存新建文件时会根据fileencoding的设置编码来保存。
" 如果是打开已有文件, Vim会根据打开文件时所识别的编码来保存, 除非在保存时重新设置fileencoding。
set fenc=utf-8

" termencodings(tenc) : 在终端环境下使用Vim时, 通过termencoding项来告诉Vim终端所使用的编码。
set termencoding=utf-8
                      
set fileformats=unix
" encoding(enc) : encoding是Vim的内部使用编码,encoding的设置会影响Vim内部的Buffer、消息文字等。
" 在Unix环境下, encoding的默认设置等于locale; 
" Windows环境下会和当前代码页相同。在中文Windows环境下encoding的默认设置是cp936(GBK).
set encoding=prc
"""""""""""""""""""""""""""""""""""""""""""""""""}



" 关闭vi兼容模式
set nocompatible

" 显示行号
set number

" 文件类型检测
filetype on

" history文件需要记录的行数
set history=100

""""""""""""""""""""""""""""""""""""
"" 显示配置
""""""""""""""""""""""""""""""""""""

" 语法高亮
syntax on

" 注释设置为亮绿色，方便查看
highlight Comment ctermfg=green guifg=green
" 高亮字符，超过100列高亮预警
highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
match OverLength '\%101v.*'

" 状态行颜色
highlight StatusLine guifg=SlateBlue guibg=Yellow
highlight StatusLineNC guifg=Gray guibg=White

" 增强模式中的命令行自动完成操作
set wildmenu

" 在状态行上显示光标所在位置的行号和列号
set ruler
set rulerformat=%20(%2*%<%f%=\ %m%r\ %3l\ %c\ %p%%%)

" 命令行（在状态行下）的高度，默认为1，这里是2
set cmdheight=2

" 使回格键（backspace）正常处理indent, eol, start等
set backspace=2

" 高亮显示匹配的括号
set showmatch

" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=5

" 在搜索的时候忽略大小写
set ignorecase

" 不要高亮被搜索的句子（phrases）
set nohlsearch

" 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set incsearch

set foldenable      " 允许折叠  
set foldmethod=manual   " 手动折叠 

" 自动格式化
set formatoptions=tcrqn
" -r:按回车不会添加注释
" -o:按o不会添加注释
" -c:重新格式化长注释行不会添加注释
set formatoptions-=r	

" 为C程序提供自动缩进
set smartindent

" 使用C样式的缩进
set cindent

" 设置制表符显示为4个空格
set tabstop=4
" 表示每一级缩进的长度, 建议与tabstop和softtabstop相同统一
set shiftwidth=4	
" 禁止空格代替制表符;  Makefile中不能用空格代替制表符号, 否则出现错误.
set noexpandtab
" 使用空格代替制表符;
"set expandtab
" 按退格键退回缩进的长度, 结合expandtab使用
"set softtabstop=4

" 不要换行
set nowrap

" 在行和段开始处使用制表符
set smarttab

" 配置代码折叠方式为marker (默认以标识'{{{'与'}}}'折叠代码)
set fdm=marker

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
  set csprg=/usr/bin/cscope
  set csto=1
  set cst
  set nocsverb
  " add any database in current directory
  if filereadable("cscope.out")
      cs add cscope.out
  endif
  set csverb
endif

" cscope 快捷键映射, Ctrl-@ 
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" :au[tocmd] [group] {event} {pat} [nested] {cmd}
" 把 {cmd} 加到 Vim 在匹配 {pat} 模式的文件执行 {event} 事件时自动执行的命令列表。
" Vim 把 {cmd} 加到已有的自动命令之后, 从而使自动命令的执行顺序与其定义的顺序相同。

"新建.c, .cpp, .h, .sh, .java文件时,执行VIM的autocmd命令
"这里使用autocmd, 实现新建文件时, 自动添加作者信息至文件头
autocmd BufNewFile *.sh exec ":call SetTitle_sh()" 
autocmd BufNewFile *.cpp,*.c exec ":call SetTitle_c()" 
autocmd BufNewFile *.h exec ":call SetTitle_h()" 
autocmd BufNewFile *.java exec ":call SetTitle_java()" 
autocmd BufNewFile *.py exec ":call SetTitle_py()" 
"新建文件后，自动定位到文件末尾
autocmd BufNewFile * normal G

""定义各自的函数SetTitle_xx() ,自动插入文件头 
func SetTitle_sh() 
	call setline(1,           "\#################################################################")
	call append(line("."),    "\#   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
	call append(line(".")+1,  "\#														  ")
	call append(line(".")+2,  "\#	> File Name:        < ".expand("%:t")." >") 
	call append(line(".")+3,  "\#	> Author:           < Sean Guo >		") 
	call append(line(".")+4,  "\#	> Mail:             < iseanxp+code@gmail.com >		") 
	call append(line(".")+5,  "\#	> Created Time:     < ".strftime("%Y/%m/%d")." >") 
	call append(line(".")+6,  "\#	> Last Changed: ")
	call append(line(".")+7,  "\#	> Description:")
	call append(line(".")+8,  "\#################################################################")
	call append(line(".")+9,  "") 
	call append(line(".")+10, "\#!/bin/bash") 
	call append(line(".")+11, "")
endfunc 
"	expand参数
"	----------------------------
"	%		获取文件名		
"	%:h		获取目录
"	%:t		获取不含路径的文件名
"	%:r		比'%'少后缀
"	%:e		获取后缀

func SetTitle_c()
	call setline(1,			  "\/****************************************************************")
	call append(line("."),    "    Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
	call append(line(".")+1,  "					      									  ")
	call append(line(".")+2,  "    > File Name:         < ".expand("%:t")." >") 
	call append(line(".")+3,  "    > Author:            < Sean Guo >") 
	call append(line(".")+4,  "    > Mail:              < iseanxp+code@gmail.com >") 
	call append(line(".")+5,  "    > Created Time:      < ".strftime("%Y/%m/%d")." >") 
	call append(line(".")+6,  "    > Last Changed: ")
	call append(line(".")+7,  "    > Description:")
	call append(line(".")+8,  "****************************************************************/")
	call append(line(".")+9,  "")
	call append(line(".")+10, "")

	" 作者信息写完了, 接下来是根据不同的后缀(c,cpp,h)决定使用不同的模板, 从第8行开始添加.

	if &filetype == 'cpp'
	call append(line(".")+11, "#include <iostream>")
	call append(line(".")+12, "using namespace std;")
	call append(line(".")+13, "")
	endif

	if &filetype == 'c'
	call append(line(".")+11, "#include <stdio.h>")
	call append(line(".")+12, "")
	call append(line(".")+13, "int main()")
	call append(line(".")+14, "{")
	call append(line(".")+15, "")
	call append(line(".")+16 ,"    return 0;")
	call append(line(".")+17, "}")
	call append(line(".")+18, "")
	endif

endfunc

func SetTitle_h()
	call setline(1,			  "\/****************************************************************")
	call append(line("."),    "    Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
	call append(line(".")+1,  "					      									  ")
	call append(line(".")+2,  "    > File Name:         < ".expand("%:t")." >") 
	call append(line(".")+3,  "    > Author:            < Sean Guo >") 
	call append(line(".")+4,  "    > Mail:              < iseanxp+code@gmail.com >") 
	call append(line(".")+5,  "    > Created Time:      < ".strftime("%Y/%m/%d")." >") 
	call append(line(".")+6,  "    > Last Changed: ")
	call append(line(".")+7,  "    > Description:")
	call append(line(".")+8,  "****************************************************************/")
	call append(line(".")+9,  "")
	call append(line(".")+10, "")
    call append(line(".")+11, "#ifndef __".expand("%:r")."__")
    call append(line(".")+12, "#define __".expand("%:r")."__")
    call append(line(".")+13, "")
    call append(line(".")+14, "#endif /* __".expand("%:r")."__ */")
endfunc

func SetTitle_java()
	call setline(1,			  "\/*-------------------------------------------------------------*")
	call append(line("."),    "    Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
	call append(line(".")+1,  "					      									  ")
	call append(line(".")+2,  "    > File Name:         < ".expand("%:t")." >") 
	call append(line(".")+3,  "    > Author:            < Sean Guo >") 
	call append(line(".")+4,  "    > Mail:              < iseanxp+code@gmail.com >") 
	call append(line(".")+5,  "    > Created Time:      < ".strftime("%Y/%m/%d")." >") 
	call append(line(".")+6,  "    > Last Changed: ")
	call append(line(".")+7,  "    > Description:")
	call append(line(".")+8,  "*--------------------------------------------------------------*/")
	call append(line(".")+9,  "")
	call append(line(".")+10, "")
	call append(line(".")+11, "public class ".expand("%:r"))
	call append(line(".")+12, "{")
	call append(line(".")+13, "")
	call append(line(".")+14, "    public static void main(String args[])")
	call append(line(".")+15, "    {")
	call append(line(".")+16, "          ")
	call append(line(".")+17, "    }")
	call append(line(".")+18, "}")
endfunc 

func SetTitle_py() 
	call setline(1,           "\#! /usr/bin/env python")
	call append(line("."),    "\#-*- coding: utf-8 -*-")
	call append(line(".")+1,  "\#################################################################")
	call append(line(".")+2,  "\#   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
	call append(line(".")+3,  "\#														  ")
	call append(line(".")+4,  "\#	> File Name:        < ".expand("%:t")." >") 
	call append(line(".")+5,  "\#	> Author:           < Sean Guo >		") 
	call append(line(".")+6,  "\#	> Mail:             < iseanxp+code@gmail.com >		") 
	call append(line(".")+7,  "\#	> Created Time:     < ".strftime("%Y/%m/%d")." >") 
	call append(line(".")+8,  "\#	> Last Changed: ")
	call append(line(".")+9,  "\#	> Description:")
	call append(line(".")+10, "\#################################################################")
	call append(line(".")+11, "") 
endfunc 
