""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" 	Copyright (C) 2016 Sean Guo. All rights reserved.
"
"     > File Name:         < .vimrc >
"     > Author:            < Sean Guo >
"     > Mail:              < iseanxp+code@gmail.com >
"     > Last Changed:      < 2016/03/29 >
"     > Description:	   vimrc for gxp
"
"    #####                       #     # ######     #     # ### #     #
"   #     # ######   ##   #    #  #   #  #     #    #     #  #  ##   ##
"   #       #       #  #  ##   #   # #   #     #    #     #  #  # # # #
"    #####  #####  #    # # #  #    #    ######     #     #  #  #  #  #
"         # #      ###### #  # #   # #   #           #   #   #  #     #
"   #     # #      #    # #   ##  #   #  #            # #    #  #     #
"    #####  ###### #    # #    # #     # #             #    ### #     #
"
"	 ______________________________________
"	/ This is the personal .vimrc file for \
"	\ SeanXP.                              /
" 	--------------------------------------
"	        \   ^__^
"	         \  (oo)\_______
"	            (__)\       )\/\
"	                ||----w |
"                   ||     ||
"   Reference: http://amix.dk/vim/vimrc.html
"
"   Vimrc Rule: Don't put any lines in your vimrc that you don't understand.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" {{{ General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=1000

" 关闭vi兼容模式
set nocompatible

" Enable filetype plugins
" 允许vim加载文件类型插件， vim会根据检测到的文件类型，在runtimepath中搜索该类型的所有插件并执行
" 本质: 执行$VIMRUNTIME/ftplugin.vim脚本
filetype plugin on
" load filetype-specific indent files
" 允许vim为不同类型的文件定义不同的缩进格式
" $VIMRUNTIME/indent.vim
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null

" Don't redraw while executing macros (good performance config)
set lazyredraw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Leader Shortcuts & Key Mapping

inoremap jk <esc>

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

nnoremap <leader>w :w!<CR>
nnoremap <leader>W :wq<CR>
nnoremap <leader>q :q!<CR>
nnoremap <leader>1 :set number!<CR>
nnoremap <leader>2 :nohlsearch<CR>
nnoremap <leader>$ :call DeleteTrailingWS()<CR>
nnoremap <leader>pp :setlocal paste!<CR>
"nnoremap <leader>a :normal @a<CR>
nnoremap <leader>d :read !date<CR>
" Remove the Windows '^M' - when the encodings gets messed up
nnoremap <Leader>m mmHmt:%s/<C-V><CR>//ge<CR>'tzt'm

" Quickly open a buffer for scribble
nnoremap <leader>b :e ./buffer<CR>
" Quickly open a markdown buffer for scribble
"nnoremap <leader>x :e ~/buffer.md<CR>

" Remap VIM 0 to first non-blank character
map 0 ^
" Moving around, tabs, windows and buffers
" Treat long lines as break lines (useful when moving around in them)
" 在折断行间进行移动，需要打开 set wrap
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
"map <space> /
" 与Mac切换输入法快捷键(Ctrl-<Space>)冲突, 故禁止
"map <c-space> ?

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" {{{ Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<CR>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" show line numbers
set number
" highlight current line
set nocursorline
" Show matching brackets when text indicator is over them
" 高亮显示匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=2
" Set 7 lines to the cursor - when moving vertically using j/k
"set so=7
" A buffer becomes hidden when it is abandoned
set hidden
" Add a bit extra margin to the left
set foldcolumn=1
" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l
" 使回格键(backspace)正常处理indent, eol, start等
"set backspace=2

"{{{ wildignore - Ignore compiled files
set wildignore+=*.swp
set wildignore+=*.o,*.obj,*~,*.pyc,*.luac,*.class,*.bak,*.jar,*.so
set wildignore+=*.gif,*.png,*.jpg,*.bmp
set wildignore+=*.zip,*.tar.*
" The has() function tests the presence of Vim features. more info ":help feature-list"
" There is no 'linux' feature.
if has("win32") || has("win64")
    set wildignore+=*\\.git\\*,*\\.hg\\*,*\\.svn\\*
    set wildignore+=*.exe
elseif has("mac") || has("unix")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*
    set wildignore+=*DS_Store*
endif
"}}}
" {{{ Search
" Ignore case when searching
" 在搜索的时候忽略大小写
set ignorecase
" When searching try to be smart about cases
set smartcase
" Highlight search results
" use: ':noh' to hide highlight
set hlsearch
" don't Highlight
"set nohlsearch
" Makes search act like search in modern browsers
" 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索）
set incsearch
" For regular expressions turn magic on
set magic
"}}}
"{{{ fold
" 允许折叠
set foldenable
" 标记折叠, marker fold (默认以标识'{{{'与'}}}'折叠代码)
set foldmethod=marker
" 手动折叠, manual fold
"set foldmethod=manual
" }}}
" {{{ Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Height of the command bar, default is 1
set cmdheight=1
" show command in right bottom bar
set showcmd

" Always show the status line
set laststatus=2

" Turn on the Wild menu, allows you to use <Left> or <Righ> to navigate through the compoetion lists.
" 增强模式中的命令行, 可以自动补全(wildmenu), 并显示多个待选命令(wildmode)
set wildmenu
" allows you to expand wildmenu
set wildmode=longest:full,full

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" No annoying sound on errors
set noerrorbells
set novisualbell
" t_vb: visual bell
set t_vb=
set tm=500

" Avoid garbled characters in Chinese language windows OS
let $LANG='en'
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
" $VIMRUNTIME/syntax/syntax.vim
syntax enable

" colors,plugins,docs都是在VIMRUNTIME目录下的
" VIM下: echo $VIMRUNTIME 查看
try
    colorscheme desert
catch
endtry
set background=dark

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions-=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language
" encoding(enc) : encoding是Vim的内部使用编码,encoding的设置会影响Vim内部的Buffer、消息文字等。
" 在Unix环境下, encoding的默认设置等于locale;
" Windows环境下会和当前代码页相同。在中文Windows环境下encoding的默认设置是cp936(GBK).
set encoding=utf8
"set encoding=prc

" Use Unix as the standard file type
set ffs=unix,dos,mac
set fileformats=unix

" 注释设置为亮绿色，方便查看
"highlight Comment ctermfg=green guifg=green

" 高亮字符，超过100列高亮预警
"highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white
"match OverLength '\%101v.*'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set noswapfile
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Be smart when using tabs ;)
" 在行和段开始处使用制表符
set smarttab
" 禁止空格代替制表符;  Makefile中不能用空格代替制表符号, 否则出现错误
"set noexpandtab
" Use spaces instead of tabs
set expandtab
" number of spaces in tab when editing
" 按退格键退回缩进的长度, 结合expandtab使用
set softtabstop=4
" 1 tab == 4 spaces
" 设置制表符显示为4个空格
set tabstop=4
" 表示每一级缩进的长度, 建议与tabstop和softtabstop相同统一
set shiftwidth=4
" Linebreak on 500 characters
set linebreak
set textwidth=500

"Auto indent
set autoindent
"Smart indent
set smartindent
" 使用C样式的缩进
"set cindent

" 自动折行––将超出屏幕范围的文本打断并显示在下一行
" Wrap lines
"set wrap
" 不要打断一长行
set nowrap
" 自定义折行
set linebreak
" 由breakat选项中的字符("^I!@*-+_;:,./?")来确定折行位置
"set breakat-=_
" 设置showbreak选项，来显示折行指示信息
"set showbreak=->
" 关闭自定义折行
"set nolinebreak
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Vim Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"https://github.com/VundleVim/Vundle.vim
filetype off " vundle required
" set the runtime path to include Vundle and initialize
set runtimepath+=~/.vim/bundle/Vundle.vim
" -------------------- vundle plugin begin -----------------
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" plugin on GitHub repo
" git in vim
Plugin 'tpope/vim-fugitive'
" vim status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Markdown in vim (vim-markdown)
" the tabular plugin must come before vim-markdown.
Plugin 'godlygeek/tabular'
Plugin 'plasticboy/vim-markdown'
" Syntax checking hacks for vim
Plugin 'scrooloose/syntastic'
" The NERD Commenter
Plugin 'scrooloose/nerdcommenter'
" The NERD Tree, explore filesystem and open files and directories.
Plugin 'scrooloose/nerdtree'
" file management in vim
Plugin 'ctrlpvim/ctrlp.vim'

" Awesome autocompletion and static analysis library for python.
"Plugin 'davidhalter/jedi'

" YouCompleteMe, a code-completion engine for Vim
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'SirVer/ultisnips'
" -------------------- vundle plugin end -----------------
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" vim-airline theme setting
let g:airline_theme = 'powerlineish'

" CtrlP's setting
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\v[\/]\.(git|hg|svn)$',
            \ 'file': '\v\.(exe|so|dll)$',
            \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
            \ }

map <C-n> :NERDTreeToggle<CR>

" disable the folding configuration for plasticboy/vim-markdown
let g:vim_markdown_folding_disabled = 1

" scrooloose/syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ cscope setting
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Usage:  cscope -Rbkq
"  -R: 在生成索引文件时，搜索子目录树中的代码
"  -b: 只生成索引文件，不进入cscope的界面
"  -k: 在生成索引文件时，不搜索/usr/include目录
"  -q: 生成cscope.in.out和cscope.po.out文件，加快cscope的索引速度
"
if has("cscope")
    if has("mac")
        set csprg=/usr/local/bin/cscope
    else
        set csprg=/usr/bin/cscope
    endif
    set csto=1
    set cst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif

" cscope 快捷键映射, Ctrl-@
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
"}}}

" {{{ AutoGroups - language-specific settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" create language-specific settings for certain filetypes/file extensions.
" wrapped in an augroup as this ensures the autocmd's are only applied once.
" the autocmd! directive clears all the autocmd's for the current group.
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    "autocmd BufWritePre *.php,*.py,*.js,*.txt,*.hs,*.java,*.md
    "            \:call <SID>StripTrailingWhitespaces()
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal list
    autocmd FileType php setlocal listchars=tab:+\ ,eol:-
    autocmd FileType php setlocal formatprg=par\ -w80\ -T4
    autocmd FileType ruby setlocal tabstop=2
    autocmd FileType ruby setlocal shiftwidth=2
    autocmd FileType ruby setlocal softtabstop=2
    autocmd FileType ruby setlocal commentstring=#\ %s
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2

    " 自动格式化, 需要放在最后，防止其他插件覆盖;
    "set formatoptions=tcrqn
    " -r:按回车不会添加注释
    " -o:按o不会添加注释
    " -c:重新格式化长注释行不会添加注释
    "set formatoptions-=r
    autocmd BufNewFile,BufRead * setlocal formatoptions-=cro
augroup END

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}

" {{{ NewFile
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
" :au[tocmd] [group] {event} {pat} [nested] {cmd}
" 把 {cmd} 加到 Vim 在匹配 {pat} 模式的文件执行 {event} 事件时自动执行的命令列表。
" Vim 把 {cmd} 加到已有的自动命令之后, 从而使自动命令的执行顺序与其定义的顺序相同。

"新建.c, .cpp, .h, .sh, .java文件时,执行VIM的autocmd命令
"这里使用autocmd, 实现新建文件时, 自动添加作者信息至文件头
autocmd BufNewFile *.sh 		exec ":call SetTitle_sh()"
autocmd BufNewFile *.cpp,*.c 	exec ":call SetTitle_c()"
autocmd BufNewFile *.h 			exec ":call SetTitle_h()"
autocmd BufNewFile *.java 		exec ":call SetTitle_java()"
autocmd BufNewFile *.py 		exec ":call SetTitle_py()"
"新建文件后，自动定位到文件末尾
autocmd BufNewFile * 			normal G

""定义各自的函数SetTitle_xx() ,自动插入文件头
func SetTitle_sh()
    call setline(1,           "\#!/bin/bash")
    call append(line("."),    "\#################################################################")
    call append(line(".")+1,  "\#   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
    call append(line(".")+2,  "\#")
    call append(line(".")+3,  "\#	> File Name:        < ".expand("%:t")." >")
    call append(line(".")+4,  "\#	> Author:           < Sean Guo >")
    call append(line(".")+5,  "\#	> Mail:             < iseanxp+code@gmail.com >")
    call append(line(".")+6,  "\#	> Created Time:     < ".strftime("%Y/%m/%d")." >")
    call append(line(".")+7,  "\#	> Description:")
    call append(line(".")+8,  "\#################################################################")
    call append(line(".")+9, "")
endfunc
"	expand参数
"	----------------------------
"	%		获取文件名
"	%:h		获取目录
"	%:t		获取不含路径的文件名
"	%:r		比'%'少后缀
"	%:e		获取后缀

func SetTitle_c()
    call setline(1,			  "/****************************************************************")
    call append(line("."),    "*   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
    call append(line(".")+1,  "*")
    call append(line(".")+2,  "*   > File Name:         < ".expand("%:t")." >")
    call append(line(".")+3,  "*   > Author:            < Sean Guo >")
    call append(line(".")+4,  "*   > Mail:              < iseanxp+code@gmail.com >")
    call append(line(".")+5,  "*   > Created Time:      < ".strftime("%Y/%m/%d")." >")
    call append(line(".")+6,  "*   > Description:")
    call append(line(".")+7,  "****************************************************************/")
    call append(line(".")+8,  "")

    if &filetype == 'cpp'
        call append(line(".")+9, "#include <iostream>")
        call append(line(".")+10, "using namespace std;")
        call append(line(".")+11, "int main(int argc, char* argv[])")
        call append(line(".")+12, "{")
        call append(line(".")+13, "")
        call append(line(".")+14 ,"     return 0;")
        call append(line(".")+15, "}")
    endif

    if &filetype == 'c'
        call append(line(".")+9, "#include <stdio.h>")
        call append(line(".")+10, "")
        call append(line(".")+11, "int main(int argc, char* argv[])")
        call append(line(".")+12, "{")
        call append(line(".")+13, "")
        call append(line(".")+14 ,"     return 0;")
        call append(line(".")+15, "}")
    endif

endfunc

func SetTitle_h()
    call setline(1,			  "/****************************************************************")
    call append(line("."),    "*   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
    call append(line(".")+1,  "*")
    call append(line(".")+2,  "*   > File Name:         < ".expand("%:t")." >")
    call append(line(".")+3,  "*   > Author:            < Sean Guo >")
    call append(line(".")+4,  "*   > Mail:              < iseanxp+code@gmail.com >")
    call append(line(".")+5,  "*   > Created Time:      < ".strftime("%Y/%m/%d")." >")
    call append(line(".")+6,  "*   > Description:")
    call append(line(".")+7,  "****************************************************************/")
    call append(line(".")+8,  "")
    call append(line(".")+9, "#ifndef __".expand("%:r")."__")
    call append(line(".")+10, "#define __".expand("%:r")."__")
    call append(line(".")+11, "")
    call append(line(".")+12, "#endif /* __".expand("%:r")."__ */")
endfunc

func SetTitle_java()
    call setline(1,			  "/*-------------------------------------------------------------*")
    call append(line("."),    "    Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
    call append(line(".")+1,  "")
    call append(line(".")+2,  "    > File Name:         < ".expand("%:t")." >")
    call append(line(".")+3,  "    > Author:            < Sean Guo >")
    call append(line(".")+4,  "    > Mail:              < iseanxp+code@gmail.com >")
    call append(line(".")+5,  "    > Created Time:      < ".strftime("%Y/%m/%d")." >")
    call append(line(".")+6,  "    > Description:")
    call append(line(".")+7,  "*--------------------------------------------------------------*/")
    call append(line(".")+8,  "")
    call append(line(".")+9,  "public class ".expand("%:r"))
    call append(line(".")+10, "{")
    call append(line(".")+11, "    public static void main(String args[])")
    call append(line(".")+12, "    {")
    call append(line(".")+13, "")
    call append(line(".")+14, "    }")
    call append(line(".")+15, "}")
endfunc

func SetTitle_py()
    call setline(1,           "\#! /usr/bin/env python3")
    call append(line("."),    "\#-*- coding: utf-8 -*-")
    call append(line(".")+1,  "\#################################################################")
    call append(line(".")+2,  "\#   Copyright (C) ".strftime("%Y")." Sean Guo. All rights reserved.")
    call append(line(".")+3,  "\#")
    call append(line(".")+4,  "\#	> File Name:        < ".expand("%:t")." >")
    call append(line(".")+5,  "\#	> Author:           < Sean Guo >")
    call append(line(".")+6,  "\#	> Mail:             < iseanxp+code@gmail.com >")
    call append(line(".")+7,  "\#	> Created Time:     < ".strftime("%Y/%m/%d")." >")
    call append(line(".")+8,  "\#	> Description:")
    call append(line(".")+9, "\#################################################################")
    call append(line(".")+10, "")
endfunc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""}}}
